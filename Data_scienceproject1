{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPV+jRLIdrjvt+rXQgOCoEs",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Hareesh292/Data_Science/blob/main/Data_scienceproject1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "                                             DATA SCIENCE PROJECT"
      ],
      "metadata": {
        "id": "l2HQEReNIENf"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qZTL1cXL7S6c"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import classification_report\n",
        "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
        "from scipy.stats import zscore"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "                                                    IRIS DATA SET"
      ],
      "metadata": {
        "id": "4C2eNyYFByP-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_iris=pd.read_csv('/content/1) iris.csv')\n",
        "df_iris"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "1dHE8N7t_1jZ",
        "outputId": "77ee9dcd-3e1e-4ce2-9967-fa6193f8bb72"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     sepal_length  sepal_width  petal_length  petal_width    species\n",
              "0             5.1          3.5           1.4          0.2     setosa\n",
              "1             4.9          3.0           1.4          0.2     setosa\n",
              "2             4.7          3.2           1.3          0.2     setosa\n",
              "3             4.6          3.1           1.5          0.2     setosa\n",
              "4             5.0          3.6           1.4          0.2     setosa\n",
              "..            ...          ...           ...          ...        ...\n",
              "145           6.7          3.0           5.2          2.3  virginica\n",
              "146           6.3          2.5           5.0          1.9  virginica\n",
              "147           6.5          3.0           5.2          2.0  virginica\n",
              "148           6.2          3.4           5.4          2.3  virginica\n",
              "149           5.9          3.0           5.1          1.8  virginica\n",
              "\n",
              "[150 rows x 5 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fbb0a01e-8579-48ad-b51e-48e60c627393\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sepal_length</th>\n",
              "      <th>sepal_width</th>\n",
              "      <th>petal_length</th>\n",
              "      <th>petal_width</th>\n",
              "      <th>species</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5.1</td>\n",
              "      <td>3.5</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4.9</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4.7</td>\n",
              "      <td>3.2</td>\n",
              "      <td>1.3</td>\n",
              "      <td>0.2</td>\n",
              "      <td>setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4.6</td>\n",
              "      <td>3.1</td>\n",
              "      <td>1.5</td>\n",
              "      <td>0.2</td>\n",
              "      <td>setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5.0</td>\n",
              "      <td>3.6</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>145</th>\n",
              "      <td>6.7</td>\n",
              "      <td>3.0</td>\n",
              "      <td>5.2</td>\n",
              "      <td>2.3</td>\n",
              "      <td>virginica</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>146</th>\n",
              "      <td>6.3</td>\n",
              "      <td>2.5</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1.9</td>\n",
              "      <td>virginica</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>147</th>\n",
              "      <td>6.5</td>\n",
              "      <td>3.0</td>\n",
              "      <td>5.2</td>\n",
              "      <td>2.0</td>\n",
              "      <td>virginica</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>148</th>\n",
              "      <td>6.2</td>\n",
              "      <td>3.4</td>\n",
              "      <td>5.4</td>\n",
              "      <td>2.3</td>\n",
              "      <td>virginica</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>149</th>\n",
              "      <td>5.9</td>\n",
              "      <td>3.0</td>\n",
              "      <td>5.1</td>\n",
              "      <td>1.8</td>\n",
              "      <td>virginica</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>150 rows Ã— 5 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fbb0a01e-8579-48ad-b51e-48e60c627393')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fbb0a01e-8579-48ad-b51e-48e60c627393 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fbb0a01e-8579-48ad-b51e-48e60c627393');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-60a30e94-7c4b-4018-b61f-a7865f6cbdc0\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-60a30e94-7c4b-4018-b61f-a7865f6cbdc0')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-60a30e94-7c4b-4018-b61f-a7865f6cbdc0 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_0d1e3953-f912-4e44-9194-02e6391f8952\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_iris')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_0d1e3953-f912-4e44-9194-02e6391f8952 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_iris');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_iris",
              "summary": "{\n  \"name\": \"df_iris\",\n  \"rows\": 150,\n  \"fields\": [\n    {\n      \"column\": \"sepal_length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8280661279778629,\n        \"min\": 4.3,\n        \"max\": 7.9,\n        \"num_unique_values\": 35,\n        \"samples\": [\n          6.2,\n          4.5,\n          5.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sepal_width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4335943113621737,\n        \"min\": 2.0,\n        \"max\": 4.4,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          2.3,\n          4.0,\n          3.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal_length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7644204199522617,\n        \"min\": 1.0,\n        \"max\": 6.9,\n        \"num_unique_values\": 43,\n        \"samples\": [\n          6.7,\n          3.8,\n          3.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal_width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7631607417008414,\n        \"min\": 0.1,\n        \"max\": 2.5,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          0.2,\n          1.2,\n          1.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"species\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"setosa\",\n          \"versicolor\",\n          \"virginica\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Handle missing data (if any)\n",
        "df_iris.fillna(df_iris.mean(numeric_only=True), inplace=True)\n",
        "df_iris"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "o0ELkYqlIi1S",
        "outputId": "1253d4a0-9d0c-47da-abd2-a1bb994b1252"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     sepal_length  sepal_width  petal_length  petal_width    species\n",
              "0             5.1          3.5           1.4          0.2     setosa\n",
              "1             4.9          3.0           1.4          0.2     setosa\n",
              "2             4.7          3.2           1.3          0.2     setosa\n",
              "3             4.6          3.1           1.5          0.2     setosa\n",
              "4             5.0          3.6           1.4          0.2     setosa\n",
              "..            ...          ...           ...          ...        ...\n",
              "145           6.7          3.0           5.2          2.3  virginica\n",
              "146           6.3          2.5           5.0          1.9  virginica\n",
              "147           6.5          3.0           5.2          2.0  virginica\n",
              "148           6.2          3.4           5.4          2.3  virginica\n",
              "149           5.9          3.0           5.1          1.8  virginica\n",
              "\n",
              "[150 rows x 5 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1a54380b-a92d-4bd9-b979-59f1ad2fd30a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sepal_length</th>\n",
              "      <th>sepal_width</th>\n",
              "      <th>petal_length</th>\n",
              "      <th>petal_width</th>\n",
              "      <th>species</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5.1</td>\n",
              "      <td>3.5</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4.9</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4.7</td>\n",
              "      <td>3.2</td>\n",
              "      <td>1.3</td>\n",
              "      <td>0.2</td>\n",
              "      <td>setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4.6</td>\n",
              "      <td>3.1</td>\n",
              "      <td>1.5</td>\n",
              "      <td>0.2</td>\n",
              "      <td>setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5.0</td>\n",
              "      <td>3.6</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>145</th>\n",
              "      <td>6.7</td>\n",
              "      <td>3.0</td>\n",
              "      <td>5.2</td>\n",
              "      <td>2.3</td>\n",
              "      <td>virginica</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>146</th>\n",
              "      <td>6.3</td>\n",
              "      <td>2.5</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1.9</td>\n",
              "      <td>virginica</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>147</th>\n",
              "      <td>6.5</td>\n",
              "      <td>3.0</td>\n",
              "      <td>5.2</td>\n",
              "      <td>2.0</td>\n",
              "      <td>virginica</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>148</th>\n",
              "      <td>6.2</td>\n",
              "      <td>3.4</td>\n",
              "      <td>5.4</td>\n",
              "      <td>2.3</td>\n",
              "      <td>virginica</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>149</th>\n",
              "      <td>5.9</td>\n",
              "      <td>3.0</td>\n",
              "      <td>5.1</td>\n",
              "      <td>1.8</td>\n",
              "      <td>virginica</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>150 rows Ã— 5 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1a54380b-a92d-4bd9-b979-59f1ad2fd30a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1a54380b-a92d-4bd9-b979-59f1ad2fd30a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1a54380b-a92d-4bd9-b979-59f1ad2fd30a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-2faa61de-c354-401d-85a5-82c7bfe8d795\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2faa61de-c354-401d-85a5-82c7bfe8d795')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-2faa61de-c354-401d-85a5-82c7bfe8d795 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_d1d365fb-fd36-48e7-b9f3-d26b15c5e923\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_iris')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_d1d365fb-fd36-48e7-b9f3-d26b15c5e923 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_iris');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_iris",
              "summary": "{\n  \"name\": \"df_iris\",\n  \"rows\": 150,\n  \"fields\": [\n    {\n      \"column\": \"sepal_length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8280661279778629,\n        \"min\": 4.3,\n        \"max\": 7.9,\n        \"num_unique_values\": 35,\n        \"samples\": [\n          6.2,\n          4.5,\n          5.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sepal_width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4335943113621737,\n        \"min\": 2.0,\n        \"max\": 4.4,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          2.3,\n          4.0,\n          3.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal_length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7644204199522617,\n        \"min\": 1.0,\n        \"max\": 6.9,\n        \"num_unique_values\": 43,\n        \"samples\": [\n          6.7,\n          3.8,\n          3.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal_width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7631607417008414,\n        \"min\": 0.1,\n        \"max\": 2.5,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          0.2,\n          1.2,\n          1.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"species\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"setosa\",\n          \"versicolor\",\n          \"virginica\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Outlier removal using Z-score\n",
        "z_scores = zscore(df_iris.select_dtypes(include=['float64', 'int64']))\n",
        "df_iris = df_iris[(abs(z_scores) < 3).all(axis=1)]\n",
        "z_scores"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZJ31sOA7IpKd",
        "outputId": "d711616a-f9b9-4dcd-ad50-c164fe19e72b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[-0.89892658,  1.08537392, -1.35289577, -1.32051128],\n",
              "       [-1.14047763, -0.10725672, -1.35289577, -1.32051128],\n",
              "       [-1.38202868,  0.36979554, -1.40988799, -1.32051128],\n",
              "       [-1.50280421,  0.13126941, -1.29590355, -1.32051128],\n",
              "       [-1.0197021 ,  1.32390005, -1.35289577, -1.32051128],\n",
              "       [-0.53659999,  2.03947844, -1.18191912, -1.05746826],\n",
              "       [-1.50280421,  0.8468478 , -1.35289577, -1.18898977],\n",
              "       [-1.0197021 ,  0.8468478 , -1.29590355, -1.32051128],\n",
              "       [-1.74435527, -0.34578284, -1.35289577, -1.32051128],\n",
              "       [-1.14047763,  0.13126941, -1.29590355, -1.45203279],\n",
              "       [-0.53659999,  1.56242618, -1.29590355, -1.32051128],\n",
              "       [-1.26125316,  0.8468478 , -1.23891134, -1.32051128],\n",
              "       [-1.26125316, -0.10725672, -1.35289577, -1.45203279],\n",
              "       [-1.86513079, -0.10725672, -1.52387242, -1.45203279],\n",
              "       [-0.05349788,  2.27800456, -1.4668802 , -1.32051128],\n",
              "       [-0.53659999,  2.03947844, -1.40988799, -1.05746826],\n",
              "       [-0.89892658,  1.08537392, -1.35289577, -1.18898977],\n",
              "       [-0.17427341,  1.80095231, -1.18191912, -1.18898977],\n",
              "       [-0.89892658,  1.80095231, -1.29590355, -1.18898977],\n",
              "       [-0.53659999,  0.8468478 , -1.18191912, -1.32051128],\n",
              "       [-0.89892658,  1.56242618, -1.29590355, -1.05746826],\n",
              "       [-1.50280421,  1.32390005, -1.58086464, -1.32051128],\n",
              "       [-0.89892658,  0.60832167, -1.18191912, -0.92594675],\n",
              "       [-1.26125316,  0.8468478 , -1.06793469, -1.32051128],\n",
              "       [-1.0197021 , -0.10725672, -1.23891134, -1.32051128],\n",
              "       [-1.0197021 ,  0.8468478 , -1.23891134, -1.05746826],\n",
              "       [-0.77815105,  1.08537392, -1.29590355, -1.32051128],\n",
              "       [-0.77815105,  0.8468478 , -1.35289577, -1.32051128],\n",
              "       [-1.38202868,  0.36979554, -1.23891134, -1.32051128],\n",
              "       [-1.26125316,  0.13126941, -1.23891134, -1.32051128],\n",
              "       [-0.53659999,  0.8468478 , -1.29590355, -1.05746826],\n",
              "       [-0.77815105,  2.51653069, -1.29590355, -1.45203279],\n",
              "       [-0.41582447,  2.75505682, -1.35289577, -1.32051128],\n",
              "       [-1.14047763,  0.13126941, -1.29590355, -1.45203279],\n",
              "       [-1.0197021 ,  0.36979554, -1.4668802 , -1.32051128],\n",
              "       [-0.41582447,  1.08537392, -1.40988799, -1.32051128],\n",
              "       [-1.14047763,  0.13126941, -1.29590355, -1.45203279],\n",
              "       [-1.74435527, -0.10725672, -1.40988799, -1.32051128],\n",
              "       [-0.89892658,  0.8468478 , -1.29590355, -1.32051128],\n",
              "       [-1.0197021 ,  1.08537392, -1.40988799, -1.18898977],\n",
              "       [-1.62357974, -1.77693961, -1.40988799, -1.18898977],\n",
              "       [-1.74435527,  0.36979554, -1.40988799, -1.32051128],\n",
              "       [-1.0197021 ,  1.08537392, -1.23891134, -0.79442524],\n",
              "       [-0.89892658,  1.80095231, -1.06793469, -1.05746826],\n",
              "       [-1.26125316, -0.10725672, -1.35289577, -1.18898977],\n",
              "       [-0.89892658,  1.80095231, -1.23891134, -1.32051128],\n",
              "       [-1.50280421,  0.36979554, -1.35289577, -1.32051128],\n",
              "       [-0.65737552,  1.56242618, -1.29590355, -1.32051128],\n",
              "       [-1.0197021 ,  0.60832167, -1.35289577, -1.32051128],\n",
              "       [ 1.39580844,  0.36979554,  0.52784737,  0.25774685],\n",
              "       [ 0.67115528,  0.36979554,  0.41386294,  0.38926837],\n",
              "       [ 1.27503292,  0.13126941,  0.64183181,  0.38926837],\n",
              "       [-0.41582447, -1.77693961,  0.12890186,  0.12622534],\n",
              "       [ 0.79193081, -0.58430897,  0.47085516,  0.38926837],\n",
              "       [-0.17427341, -0.58430897,  0.41386294,  0.12622534],\n",
              "       [ 0.55037975,  0.60832167,  0.52784737,  0.52078988],\n",
              "       [-1.14047763, -1.53841348, -0.27004366, -0.26833919],\n",
              "       [ 0.91270633, -0.34578284,  0.47085516,  0.12622534],\n",
              "       [-0.77815105, -0.8228351 ,  0.07190964,  0.25774685],\n",
              "       [-1.0197021 , -2.49251799, -0.15605922, -0.26833919],\n",
              "       [ 0.06727764, -0.10725672,  0.24288629,  0.38926837],\n",
              "       [ 0.18805317, -2.01546574,  0.12890186, -0.26833919],\n",
              "       [ 0.3088287 , -0.34578284,  0.52784737,  0.25774685],\n",
              "       [-0.29504894, -0.34578284, -0.09906701,  0.12622534],\n",
              "       [ 1.03348186,  0.13126941,  0.35687072,  0.25774685],\n",
              "       [-0.29504894, -0.10725672,  0.41386294,  0.38926837],\n",
              "       [-0.05349788, -0.8228351 ,  0.18589408, -0.26833919],\n",
              "       [ 0.42960422, -2.01546574,  0.41386294,  0.38926837],\n",
              "       [-0.29504894, -1.29988735,  0.07190964, -0.13681768],\n",
              "       [ 0.06727764,  0.36979554,  0.58483959,  0.7838329 ],\n",
              "       [ 0.3088287 , -0.58430897,  0.12890186,  0.12622534],\n",
              "       [ 0.55037975, -1.29988735,  0.64183181,  0.38926837],\n",
              "       [ 0.3088287 , -0.58430897,  0.52784737, -0.00529617],\n",
              "       [ 0.67115528, -0.34578284,  0.29987851,  0.12622534],\n",
              "       [ 0.91270633, -0.10725672,  0.35687072,  0.25774685],\n",
              "       [ 1.15425739, -0.58430897,  0.58483959,  0.25774685],\n",
              "       [ 1.03348186, -0.10725672,  0.69882402,  0.65231139],\n",
              "       [ 0.18805317, -0.34578284,  0.41386294,  0.38926837],\n",
              "       [-0.17427341, -1.06136123, -0.15605922, -0.26833919],\n",
              "       [-0.41582447, -1.53841348,  0.01491743, -0.13681768],\n",
              "       [-0.41582447, -1.53841348, -0.04207479, -0.26833919],\n",
              "       [-0.05349788, -0.8228351 ,  0.07190964, -0.00529617],\n",
              "       [ 0.18805317, -0.8228351 ,  0.75581624,  0.52078988],\n",
              "       [-0.53659999, -0.10725672,  0.41386294,  0.38926837],\n",
              "       [ 0.18805317,  0.8468478 ,  0.41386294,  0.52078988],\n",
              "       [ 1.03348186,  0.13126941,  0.52784737,  0.38926837],\n",
              "       [ 0.55037975, -1.77693961,  0.35687072,  0.12622534],\n",
              "       [-0.29504894, -0.10725672,  0.18589408,  0.12622534],\n",
              "       [-0.41582447, -1.29988735,  0.12890186,  0.12622534],\n",
              "       [-0.41582447, -1.06136123,  0.35687072, -0.00529617],\n",
              "       [ 0.3088287 , -0.10725672,  0.47085516,  0.25774685],\n",
              "       [-0.05349788, -1.06136123,  0.12890186, -0.00529617],\n",
              "       [-1.0197021 , -1.77693961, -0.27004366, -0.26833919],\n",
              "       [-0.29504894, -0.8228351 ,  0.24288629,  0.12622534],\n",
              "       [-0.17427341, -0.10725672,  0.24288629, -0.00529617],\n",
              "       [-0.17427341, -0.34578284,  0.24288629,  0.12622534],\n",
              "       [ 0.42960422, -0.34578284,  0.29987851,  0.12622534],\n",
              "       [-0.89892658, -1.29988735, -0.44102031, -0.13681768],\n",
              "       [-0.17427341, -0.58430897,  0.18589408,  0.12622534],\n",
              "       [ 0.55037975,  0.60832167,  1.26874619,  1.70448348],\n",
              "       [-0.05349788, -0.8228351 ,  0.75581624,  0.91535441],\n",
              "       [ 1.51658397, -0.10725672,  1.21175397,  1.17839744],\n",
              "       [ 0.55037975, -0.34578284,  1.04077732,  0.7838329 ],\n",
              "       [ 0.79193081, -0.10725672,  1.15476176,  1.30991895],\n",
              "       [ 2.12046161, -0.10725672,  1.61069949,  1.17839744],\n",
              "       [-1.14047763, -1.29988735,  0.41386294,  0.65231139],\n",
              "       [ 1.75813502, -0.34578284,  1.43972284,  0.7838329 ],\n",
              "       [ 1.03348186, -1.29988735,  1.15476176,  0.7838329 ],\n",
              "       [ 1.6373595 ,  1.32390005,  1.32573841,  1.70448348],\n",
              "       [ 0.79193081,  0.36979554,  0.75581624,  1.04687592],\n",
              "       [ 0.67115528, -0.8228351 ,  0.86980067,  0.91535441],\n",
              "       [ 1.15425739, -0.10725672,  0.98378511,  1.17839744],\n",
              "       [-0.17427341, -1.29988735,  0.69882402,  1.04687592],\n",
              "       [-0.05349788, -0.58430897,  0.75581624,  1.57296197],\n",
              "       [ 0.67115528,  0.36979554,  0.86980067,  1.44144046],\n",
              "       [ 0.79193081, -0.10725672,  0.98378511,  0.7838329 ],\n",
              "       [ 2.24123713,  1.80095231,  1.6676917 ,  1.30991895],\n",
              "       [ 2.24123713, -1.06136123,  1.78167614,  1.44144046],\n",
              "       [ 0.18805317, -2.01546574,  0.69882402,  0.38926837],\n",
              "       [ 1.27503292,  0.36979554,  1.09776954,  1.44144046],\n",
              "       [-0.29504894, -0.58430897,  0.64183181,  1.04687592],\n",
              "       [ 2.24123713, -0.58430897,  1.6676917 ,  1.04687592],\n",
              "       [ 0.55037975, -0.8228351 ,  0.64183181,  0.7838329 ],\n",
              "       [ 1.03348186,  0.60832167,  1.09776954,  1.17839744],\n",
              "       [ 1.6373595 ,  0.36979554,  1.26874619,  0.7838329 ],\n",
              "       [ 0.42960422, -0.58430897,  0.58483959,  0.7838329 ],\n",
              "       [ 0.3088287 , -0.10725672,  0.64183181,  0.7838329 ],\n",
              "       [ 0.67115528, -0.58430897,  1.04077732,  1.17839744],\n",
              "       [ 1.6373595 , -0.10725672,  1.15476176,  0.52078988],\n",
              "       [ 1.87891055, -0.58430897,  1.32573841,  0.91535441],\n",
              "       [ 2.48278819,  1.80095231,  1.49671505,  1.04687592],\n",
              "       [ 0.67115528, -0.58430897,  1.04077732,  1.30991895],\n",
              "       [ 0.55037975, -0.58430897,  0.75581624,  0.38926837],\n",
              "       [ 0.3088287 , -1.06136123,  1.04077732,  0.25774685],\n",
              "       [ 2.24123713, -0.10725672,  1.32573841,  1.44144046],\n",
              "       [ 0.55037975,  0.8468478 ,  1.04077732,  1.57296197],\n",
              "       [ 0.67115528,  0.13126941,  0.98378511,  0.7838329 ],\n",
              "       [ 0.18805317, -0.10725672,  0.58483959,  0.7838329 ],\n",
              "       [ 1.27503292,  0.13126941,  0.92679289,  1.17839744],\n",
              "       [ 1.03348186,  0.13126941,  1.04077732,  1.57296197],\n",
              "       [ 1.27503292,  0.13126941,  0.75581624,  1.44144046],\n",
              "       [-0.05349788, -0.8228351 ,  0.75581624,  0.91535441],\n",
              "       [ 1.15425739,  0.36979554,  1.21175397,  1.44144046],\n",
              "       [ 1.03348186,  0.60832167,  1.09776954,  1.70448348],\n",
              "       [ 1.03348186, -0.10725672,  0.81280846,  1.44144046],\n",
              "       [ 0.55037975, -1.29988735,  0.69882402,  0.91535441],\n",
              "       [ 0.79193081, -0.10725672,  0.81280846,  1.04687592],\n",
              "       [ 0.42960422,  0.8468478 ,  0.92679289,  1.44144046],\n",
              "       [ 0.06727764, -0.10725672,  0.75581624,  0.7838329 ]])"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Encode target if needed (already string labels, but shown for learning)\n",
        "label_encoder = LabelEncoder()\n",
        "df_iris[\"species\"] = label_encoder.fit_transform(df_iris[\"species\"])\n",
        "df_iris"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "jN-zJFnbI0fu",
        "outputId": "fb557341-e2f4-43fc-85c2-89acc22ec845"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     sepal_length  sepal_width  petal_length  petal_width  species\n",
              "0             5.1          3.5           1.4          0.2        0\n",
              "1             4.9          3.0           1.4          0.2        0\n",
              "2             4.7          3.2           1.3          0.2        0\n",
              "3             4.6          3.1           1.5          0.2        0\n",
              "4             5.0          3.6           1.4          0.2        0\n",
              "..            ...          ...           ...          ...      ...\n",
              "145           6.7          3.0           5.2          2.3        2\n",
              "146           6.3          2.5           5.0          1.9        2\n",
              "147           6.5          3.0           5.2          2.0        2\n",
              "148           6.2          3.4           5.4          2.3        2\n",
              "149           5.9          3.0           5.1          1.8        2\n",
              "\n",
              "[150 rows x 5 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a73dd14d-3d6f-4f5d-aed6-c756e2744af1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sepal_length</th>\n",
              "      <th>sepal_width</th>\n",
              "      <th>petal_length</th>\n",
              "      <th>petal_width</th>\n",
              "      <th>species</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5.1</td>\n",
              "      <td>3.5</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4.9</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4.7</td>\n",
              "      <td>3.2</td>\n",
              "      <td>1.3</td>\n",
              "      <td>0.2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4.6</td>\n",
              "      <td>3.1</td>\n",
              "      <td>1.5</td>\n",
              "      <td>0.2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5.0</td>\n",
              "      <td>3.6</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>145</th>\n",
              "      <td>6.7</td>\n",
              "      <td>3.0</td>\n",
              "      <td>5.2</td>\n",
              "      <td>2.3</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>146</th>\n",
              "      <td>6.3</td>\n",
              "      <td>2.5</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1.9</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>147</th>\n",
              "      <td>6.5</td>\n",
              "      <td>3.0</td>\n",
              "      <td>5.2</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>148</th>\n",
              "      <td>6.2</td>\n",
              "      <td>3.4</td>\n",
              "      <td>5.4</td>\n",
              "      <td>2.3</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>149</th>\n",
              "      <td>5.9</td>\n",
              "      <td>3.0</td>\n",
              "      <td>5.1</td>\n",
              "      <td>1.8</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>150 rows Ã— 5 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a73dd14d-3d6f-4f5d-aed6-c756e2744af1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a73dd14d-3d6f-4f5d-aed6-c756e2744af1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a73dd14d-3d6f-4f5d-aed6-c756e2744af1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-09b3bb18-36e4-4452-97eb-778a644dbc40\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-09b3bb18-36e4-4452-97eb-778a644dbc40')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-09b3bb18-36e4-4452-97eb-778a644dbc40 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_0024103f-21d7-4b7e-85aa-1f8a9f4d39f3\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_iris')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_0024103f-21d7-4b7e-85aa-1f8a9f4d39f3 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_iris');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_iris",
              "summary": "{\n  \"name\": \"df_iris\",\n  \"rows\": 150,\n  \"fields\": [\n    {\n      \"column\": \"sepal_length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8280661279778629,\n        \"min\": 4.3,\n        \"max\": 7.9,\n        \"num_unique_values\": 35,\n        \"samples\": [\n          6.2,\n          4.5,\n          5.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sepal_width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4335943113621737,\n        \"min\": 2.0,\n        \"max\": 4.4,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          2.3,\n          4.0,\n          3.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal_length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7644204199522617,\n        \"min\": 1.0,\n        \"max\": 6.9,\n        \"num_unique_values\": 43,\n        \"samples\": [\n          6.7,\n          3.8,\n          3.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal_width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7631607417008414,\n        \"min\": 0.1,\n        \"max\": 2.5,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          0.2,\n          1.2,\n          1.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"species\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          1,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Normalize features\n",
        "features = df_iris.drop(\"species\", axis=1)\n",
        "scaler = StandardScaler()\n",
        "scaled_features = scaler.fit_transform(features)\n",
        "X = pd.DataFrame(scaled_features, columns=features.columns)\n",
        "y = df_iris[\"species\"]"
      ],
      "metadata": {
        "id": "EeFj46s9JC7a"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Train/Test split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n",
        "model = RandomForestClassifier()\n",
        "model.fit(X_train, y_train)\n",
        "y_pred = model.predict(X_test)"
      ],
      "metadata": {
        "id": "iRbN-jiiJR4R"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluation\n",
        "print(\"Classification Report:\\n\", classification_report(y_test, y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NqyhAyh7JZJ0",
        "outputId": "653a4a99-ea71-41b5-81d8-b686a17bdcca"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Classification Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00         9\n",
            "           1       0.90      1.00      0.95         9\n",
            "           2       1.00      0.92      0.96        12\n",
            "\n",
            "    accuracy                           0.97        30\n",
            "   macro avg       0.97      0.97      0.97        30\n",
            "weighted avg       0.97      0.97      0.97        30\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Task 2 - Stock Prices: Time Series Visualization"
      ],
      "metadata": {
        "id": "MlIp7KMeJifD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_stock=pd.read_csv('/content/2) Stock Prices Data Set.csv')\n",
        "apple = df_stock[df_stock['symbol'] == 'AAPL']\n",
        "apple['date'] = pd.to_datetime(apple['date'])\n",
        "apple.set_index('date', inplace=True)\n",
        "apple['close'].plot(title=\"Apple Stock Closing Prices\")\n",
        "plt.xlabel(\"Date\")\n",
        "plt.ylabel(\"Price\")\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 560
        },
        "id": "69pgAEtsJhi4",
        "outputId": "c57ee41f-8b85-4916-ddbe-db5fb5b40ce6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-14-8fa339625192>:3: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  apple['date'] = pd.to_datetime(apple['date'])\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Objective: Use TF-IDF and Naive Bayes to classify text sentiment."
      ],
      "metadata": {
        "id": "BHw13xZnKljv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.naive_bayes import MultinomialNB"
      ],
      "metadata": {
        "id": "v7cc57KMKitt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Load and process data\n",
        "df_sentiment = pd.read_csv(\"/content/3) Sentiment dataset.csv\")\n",
        "X_text = df_sentiment[\"Text\"]\n",
        "y_sentiment = df_sentiment[\"Sentiment\"]\n",
        "vectorizer = TfidfVectorizer(stop_words='english')\n",
        "X_tfidf = vectorizer.fit_transform(X_text)"
      ],
      "metadata": {
        "id": "XzSxXzLxKs-8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Train model\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_tfidf, y_sentiment, test_size=0.2)\n",
        "model = MultinomialNB()\n",
        "model.fit(X_train, y_train)\n",
        "y_pred = model.predict(X_test)\n",
        "print(\"Sentiment Classification Report:\\n\", classification_report(y_test, y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "F_WhJ7X6K6zU",
        "outputId": "930534da-e40c-4737-df41-59a9bf405ad4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sentiment Classification Report:\n",
            "                         precision    recall  f1-score   support\n",
            "\n",
            "         Acceptance          0.00      0.00      0.00         1\n",
            "       Accomplishment        0.00      0.00      0.00         1\n",
            "         Admiration          0.00      0.00      0.00         1\n",
            "            Adventure        0.00      0.00      0.00         1\n",
            "         Affection           0.00      0.00      0.00         1\n",
            "      Ambivalence            0.00      0.00      0.00         1\n",
            "         Apprehensive        0.00      0.00      0.00         2\n",
            "        Arousal              0.00      0.00      0.00         2\n",
            "                  Awe        0.00      0.00      0.00         1\n",
            "         Awe                 0.00      0.00      0.00         1\n",
            "                  Bad        0.00      0.00      0.00         2\n",
            "             Betrayal        0.00      0.00      0.00         1\n",
            "        Betrayal             0.00      0.00      0.00         1\n",
            "         Bitter              0.00      0.00      0.00         1\n",
            "           Bitterness        0.00      0.00      0.00         2\n",
            "      Boredom                0.00      0.00      0.00         1\n",
            "         Calmness            0.00      0.00      0.00         1\n",
            "          Celebration        0.00      0.00      0.00         1\n",
            "            Challenge        0.00      0.00      0.00         1\n",
            "            Compassion       0.00      0.00      0.00         1\n",
            "        Compassion           0.00      0.00      0.00         1\n",
            "        Compassionate        0.00      0.00      0.00         1\n",
            "        Confidence           0.00      0.00      0.00         1\n",
            "            Confident        0.00      0.00      0.00         1\n",
            "      Confusion              0.00      0.00      0.00         2\n",
            "          Contentment        0.00      0.00      0.00         4\n",
            "        Contentment          0.00      0.00      0.00         2\n",
            "         Coziness            0.00      0.00      0.00         1\n",
            " Creative Inspiration        0.00      0.00      0.00         1\n",
            "           Creativity        0.00      0.00      0.00         1\n",
            "            Curiosity        0.00      0.00      0.00         2\n",
            "        Curiosity            0.00      0.00      0.00         1\n",
            "      Curiosity              0.00      0.00      0.00         1\n",
            "         Darkness            0.00      0.00      0.00         1\n",
            "           Desolation        0.00      0.00      0.00         1\n",
            "            Despair          0.00      0.00      0.00         2\n",
            "      Determination          0.00      0.00      0.00         1\n",
            "           Devastated        0.00      0.00      0.00         1\n",
            "       Disappointment        0.00      0.00      0.00         1\n",
            "      Disgust                0.00      0.00      0.00         1\n",
            "        DreamChaser          0.00      0.00      0.00         1\n",
            "            Elation          0.00      0.00      0.00         1\n",
            "        Elation              0.00      0.00      0.00         1\n",
            "          Embarrassed        0.00      0.00      0.00         2\n",
            "        Empowerment          0.00      0.00      0.00         1\n",
            "        Enchantment          0.00      0.00      0.00         1\n",
            "        Enthusiasm           0.00      0.00      0.00         1\n",
            "              Envious        0.00      0.00      0.00         2\n",
            "        Euphoria             0.00      0.00      0.00         1\n",
            "           Excitement        0.00      0.00      0.00         7\n",
            "          Exploration        0.00      0.00      0.00         1\n",
            "              Fearful        0.00      0.00      0.00         1\n",
            "           Frustrated        0.00      0.00      0.00         1\n",
            "          Frustration        0.00      0.00      0.00         1\n",
            "      Frustration            0.00      0.00      0.00         1\n",
            "        Fulfillment          0.00      0.00      0.00         1\n",
            "             Grandeur        0.00      0.00      0.00         1\n",
            "             Grateful        0.00      0.00      0.00         1\n",
            "            Gratitude        0.00      0.00      0.00         3\n",
            "        Gratitude            0.00      0.00      0.00         1\n",
            "                Grief        0.00      0.00      0.00         2\n",
            "           Grief             0.00      0.00      0.00         1\n",
            "      Grief                  0.00      0.00      0.00         1\n",
            "            Happiness        0.00      0.00      0.00         1\n",
            "         Happiness           0.00      0.00      0.00         1\n",
            "                Happy        0.00      0.00      0.00         3\n",
            "        Harmony              0.00      0.00      0.00         1\n",
            "                 Hate        0.00      0.00      0.00         1\n",
            "            Heartache        0.00      0.00      0.00         1\n",
            "              Hopeful        0.00      0.00      0.00         3\n",
            "            Immersion        0.00      0.00      0.00         1\n",
            "                  Joy        0.04      0.80      0.07         5\n",
            "             LostLove        0.00      0.00      0.00         1\n",
            "         Love                0.00      0.00      0.00         1\n",
            "          Mesmerizing        0.00      0.00      0.00         1\n",
            "          Mischievous        0.00      0.00      0.00         1\n",
            "            Negative         0.00      0.00      0.00         1\n",
            "              Neutral        0.00      0.00      0.00         4\n",
            "            Nostalgia        0.00      0.00      0.00         1\n",
            "      Numbness               0.00      0.00      0.00         2\n",
            "            Positive         0.21      0.80      0.33        10\n",
            "         Pride               0.00      0.00      0.00         2\n",
            "                Proud        0.00      0.00      0.00         1\n",
            "           Reflection        0.00      0.00      0.00         1\n",
            "       Regret                0.00      0.00      0.00         1\n",
            "         Resilience          0.00      0.00      0.00         1\n",
            "        Reverence            0.00      0.00      0.00         2\n",
            "              Romance        0.00      0.00      0.00         1\n",
            "           Ruins             0.00      0.00      0.00         1\n",
            "         Satisfaction        0.00      0.00      0.00         1\n",
            "             Serenity        0.00      0.00      0.00         1\n",
            "      Serenity               0.00      0.00      0.00         1\n",
            "             Surprise        0.00      0.00      0.00         1\n",
            "         Surprise            0.00      0.00      0.00         1\n",
            "        Surprise             0.00      0.00      0.00         1\n",
            "        Tenderness           0.00      0.00      0.00         2\n",
            "               Thrill        0.00      0.00      0.00         2\n",
            "    Thrilling Journey        0.00      0.00      0.00         1\n",
            "          Tranquility        0.00      0.00      0.00         1\n",
            "         Winter Magic        0.00      0.00      0.00         1\n",
            "\n",
            "              accuracy                           0.08       147\n",
            "             macro avg       0.00      0.02      0.00       147\n",
            "          weighted avg       0.02      0.08      0.03       147\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_squared_error\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "import numpy as np\n",
        "\n",
        "# Load dataset\n",
        "# Assuming header=None is correct and the last column is the target.\n",
        "df = pd.read_csv(\"/content/4) house Prediction Data Set.csv\", header=None)\n",
        "\n",
        "# Separate features and target\n",
        "X = df.iloc[:, :-1].copy() # Use .copy() to avoid SettingWithCopyWarning\n",
        "y = df.iloc[:, -1].copy() # Use .copy()\n",
        "\n",
        "# --- Robust Data Cleaning ---\n",
        "\n",
        "# Clean and convert target column (y)\n",
        "# First, strip whitespace if it's an object type, then coerce to numeric\n",
        "if y.dtype == 'object':\n",
        "    y = y.astype(str).str.strip()\n",
        "y_clean = pd.to_numeric(y, errors='coerce')\n",
        "\n",
        "# Clean and convert feature columns (X)\n",
        "X_clean_list = []\n",
        "for col_idx in X.columns:\n",
        "    col = X[col_idx]\n",
        "    # If column is object type, strip whitespace\n",
        "    if col.dtype == 'object':\n",
        "        col = col.astype(str).str.strip()\n",
        "\n",
        "    # Attempt to convert to numeric, coercing errors to NaN\n",
        "    col_numeric = pd.to_numeric(col, errors='coerce')\n",
        "\n",
        "    # Check if the column is mostly numeric after coercion\n",
        "    # You can adjust the threshold (e.g., 0.5 means at least 50% non-NaN)\n",
        "    if col_numeric.notna().sum() / len(col_numeric) > 0.5:\n",
        "        X_clean_list.append(col_numeric.rename(col_idx)) # Keep original column index\n",
        "\n",
        "# Combine the cleaned numeric feature columns back into a DataFrame\n",
        "if not X_clean_list:\n",
        "    print(\"Error: No numeric features could be extracted from the dataset after cleaning.\")\n",
        "    # You might want to exit or raise an error here if no features are found\n",
        "    X_clean = pd.DataFrame() # Create an empty DataFrame to avoid errors later\n",
        "else:\n",
        "    X_clean = pd.concat(X_clean_list, axis=1)\n",
        "\n",
        "# Drop rows where either the target (y_clean) or *any* feature in X_clean is NaN\n",
        "# Align indices for consistent dropping\n",
        "combined = pd.concat([X_clean, y_clean], axis=1).dropna()\n",
        "\n",
        "# Separate the cleaned data back into features and target\n",
        "# Check if any rows remain after dropping NaNs\n",
        "if combined.empty:\n",
        "    print(\"Warning: All rows were dropped after cleaning due to missing or non-numeric values.\")\n",
        "    # Handle this case, e.g., by not proceeding with scaling and training\n",
        "else:\n",
        "    # Assuming the last column in combined is the target, and the rest are features\n",
        "    X_final = combined.iloc[:, :-1]\n",
        "    y_final = combined.iloc[:, -1]\n",
        "\n",
        "    # âœ… Scale the features - only if there are features to scale\n",
        "    if not X_final.empty:\n",
        "        scaler = StandardScaler()\n",
        "        X_scaled = scaler.fit_transform(X_final)\n",
        "\n",
        "        # Train/test split\n",
        "        # Added random_state for reproducibility\n",
        "        X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_final, test_size=0.2, random_state=42)\n",
        "\n",
        "        # Fit the model\n",
        "        model = LinearRegression()\n",
        "        model.fit(X_train, y_train)\n",
        "        y_pred = model.predict(X_test)\n",
        "\n",
        "        # Evaluate\n",
        "        print(\"House Price MSE:\", mean_squared_error(y_test, y_pred))\n",
        "    else:\n",
        "         print(\"Warning: No features remaining after cleaning, cannot scale or train model.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5AU3P9LkfySz",
        "outputId": "055a9f31-daa1-4f7f-a7c4-8b988c84080e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Error: No numeric features could be extracted from the dataset after cleaning.\n",
            "Warning: All rows were dropped after cleaning due to missing or non-numeric values.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_squared_error\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "import numpy as np\n",
        "\n",
        "# Load dataset\n",
        "# Assuming header=None is correct and the last column is the target.\n",
        "df = pd.read_csv(\"/content/4) house Prediction Data Set.csv\", header=None)\n",
        "\n",
        "# --- Inspection Step ---\n",
        "print(\"--- First 5 rows of the raw DataFrame ---\")\n",
        "print(df.head().to_markdown(index=False)) # Print using markdown for readability\n",
        "print(\"\\n--- Data types of each column ---\")\n",
        "print(df.info()) # Print data types and non-null counts\n",
        "print(\"\\n--- Unique values and counts for first few columns (helps spot non-numeric issues) ---\")\n",
        "# Check the first 5 columns, adjust as needed based on your data\n",
        "for i in range(min(5, df.shape[1])):\n",
        "    print(f\"\\nColumn {i}:\")\n",
        "    # Print value counts for top occurring values to see if there are problematic strings\n",
        "    print(df[i].value_counts().head(10))\n",
        "\n",
        "\n",
        "# The rest of your cleaning and modeling code follows, but it's currently failing\n",
        "# because the cleaning steps result in empty data. You need to fix the cleaning\n",
        "# based on the inspection results.\n",
        "\n",
        "# Separate features and target (This part will likely still fail or result in empty data\n",
        "# until the fundamental reading/cleaning issue is addressed based on data inspection)\n",
        "X = df.iloc[:, :-1].copy()\n",
        "y = df.iloc[:, -1].copy()\n",
        "\n",
        "# ... (rest of the cleaning and modeling code from the previous suggestion) ...\n",
        "\n",
        "# Clean and convert target column (y)\n",
        "if y.dtype == 'object':\n",
        "    y = y.astype(str).str.strip()\n",
        "y_clean = pd.to_numeric(y, errors='coerce')\n",
        "\n",
        "# Clean and convert feature columns (X)\n",
        "X_clean_list = []\n",
        "for col_idx in X.columns:\n",
        "    col = X[col_idx]\n",
        "    if col.dtype == 'object':\n",
        "        col = col.astype(str).str.strip()\n",
        "\n",
        "    col_numeric = pd.to_numeric(col, errors='coerce')\n",
        "\n",
        "    if col_numeric.notna().sum() / len(col_numeric) > 0.5:\n",
        "        X_clean_list.append(col_numeric.rename(col_idx))\n",
        "\n",
        "if not X_clean_list:\n",
        "    print(\"Error: No numeric features could be extracted from the dataset after cleaning.\")\n",
        "    X_clean = pd.DataFrame()\n",
        "else:\n",
        "    X_clean = pd.concat(X_clean_list, axis=1)\n",
        "\n",
        "\n",
        "# Drop rows where either the target (y_clean) or *any* feature in X_clean is NaN\n",
        "# Align indices for consistent dropping\n",
        "combined = pd.concat([X_clean, y_clean], axis=1).dropna()\n",
        "\n",
        "# Separate the cleaned data back into features and target\n",
        "if combined.empty:\n",
        "    print(\"Warning: All rows were dropped after cleaning due to missing or non-numeric values.\")\n",
        "else:\n",
        "    X_final = combined.iloc[:, :-1]\n",
        "    y_final = combined.iloc[:, -1]\n",
        "\n",
        "    # âœ… Scale the features - only if there are features to scale\n",
        "    if not X_final.empty:\n",
        "        scaler = StandardScaler()\n",
        "        X_scaled = scaler.fit_transform(X_final)\n",
        "\n",
        "        # Train/test split\n",
        "        X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_final, test_size=0.2, random_state=42)\n",
        "\n",
        "        # Fit the model\n",
        "        model = LinearRegression()\n",
        "        model.fit(X_train, y_train)\n",
        "        y_pred = model.predict(X_test)\n",
        "\n",
        "        # Evaluate\n",
        "        print(\"House Price MSE:\", mean_squared_error(y_test, y_pred))\n",
        "    else:\n",
        "         print(\"Warning: No features remaining after cleaning, cannot scale or train model.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NFrB0cLggGt8",
        "outputId": "04d75724-a154-4b5f-c7de-6cfeb2b9bd37"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- First 5 rows of the raw DataFrame ---\n",
            "| 0                                                                                               |\n",
            "|:------------------------------------------------------------------------------------------------|\n",
            "| 0.00632  18.00   2.310  0  0.5380  6.5750  65.20  4.0900   1  296.0  15.30 396.90   4.98  24.00 |\n",
            "| 0.02731   0.00   7.070  0  0.4690  6.4210  78.90  4.9671   2  242.0  17.80 396.90   9.14  21.60 |\n",
            "| 0.02729   0.00   7.070  0  0.4690  7.1850  61.10  4.9671   2  242.0  17.80 392.83   4.03  34.70 |\n",
            "| 0.03237   0.00   2.180  0  0.4580  6.9980  45.80  6.0622   3  222.0  18.70 394.63   2.94  33.40 |\n",
            "| 0.06905   0.00   2.180  0  0.4580  7.1470  54.20  6.0622   3  222.0  18.70 396.90   5.33  36.20 |\n",
            "\n",
            "--- Data types of each column ---\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 506 entries, 0 to 505\n",
            "Data columns (total 1 columns):\n",
            " #   Column  Non-Null Count  Dtype \n",
            "---  ------  --------------  ----- \n",
            " 0   0       506 non-null    object\n",
            "dtypes: object(1)\n",
            "memory usage: 4.1+ KB\n",
            "None\n",
            "\n",
            "--- Unique values and counts for first few columns (helps spot non-numeric issues) ---\n",
            "\n",
            "Column 0:\n",
            "0\n",
            "0.04741   0.00  11.930  0  0.5730  6.0300  80.80  2.5050   1  273.0  21.00 396.90   7.88  11.90    1\n",
            "0.00632  18.00   2.310  0  0.5380  6.5750  65.20  4.0900   1  296.0  15.30 396.90   4.98  24.00    1\n",
            "0.02731   0.00   7.070  0  0.4690  6.4210  78.90  4.9671   2  242.0  17.80 396.90   9.14  21.60    1\n",
            "0.02729   0.00   7.070  0  0.4690  7.1850  61.10  4.9671   2  242.0  17.80 392.83   4.03  34.70    1\n",
            "0.03237   0.00   2.180  0  0.4580  6.9980  45.80  6.0622   3  222.0  18.70 394.63   2.94  33.40    1\n",
            "0.06905   0.00   2.180  0  0.4580  7.1470  54.20  6.0622   3  222.0  18.70 396.90   5.33  36.20    1\n",
            "0.02985   0.00   2.180  0  0.4580  6.4300  58.70  6.0622   3  222.0  18.70 394.12   5.21  28.70    1\n",
            "0.08829  12.50   7.870  0  0.5240  6.0120  66.60  5.5605   5  311.0  15.20 395.60  12.43  22.90    1\n",
            "0.14455  12.50   7.870  0  0.5240  6.1720  96.10  5.9505   5  311.0  15.20 396.90  19.15  27.10    1\n",
            "0.21124  12.50   7.870  0  0.5240  5.6310 100.00  6.0821   5  311.0  15.20 386.63  29.93  16.50    1\n",
            "Name: count, dtype: int64\n",
            "Error: No numeric features could be extracted from the dataset after cleaning.\n",
            "Warning: All rows were dropped after cleaning due to missing or non-numeric values.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_squared_error\n",
        "from sklearn.model_selection import train_test_split"
      ],
      "metadata": {
        "id": "ysz3nxsgLOhj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "8A6dorvD89To"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Load dataset\n",
        "df_house = pd.read_csv(\"/content/4) house Prediction Data Set.csv\", header=None)\n",
        "X_house = df_house.iloc[:, :-1]\n",
        "y_house = df_house.iloc[:, -1]"
      ],
      "metadata": {
        "id": "JDIFgfgwLdSK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Task 5 - Customer Churn Prediction: Classification\n",
        "\"\"\"\n",
        "Objective: Predict whether a customer will churn using RandomForest.\n",
        "\"\"\"\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "\n",
        "# Load datasets\n",
        "train_df = pd.read_csv(\"/content/churn-bigml-80.csv\")\n",
        "test_df = pd.read_csv(\"/content/churn-bigml-20.csv\")\n",
        "\n",
        "# Prepare data\n",
        "X_train = train_df.drop(\"Churn\", axis=1)._get_numeric_data()\n",
        "y_train = train_df[\"Churn\"].astype(bool)\n",
        "X_test = test_df.drop(\"Churn\", axis=1)._get_numeric_data()\n",
        "y_test = test_df[\"Churn\"].astype(bool)\n",
        "\n",
        "# Train model\n",
        "model = RandomForestClassifier()\n",
        "model.fit(X_train, y_train)\n",
        "y_pred = model.predict(X_test)\n",
        "print(\"Churn Prediction Report:\\n\", classification_report(y_test, y_pred))"
      ],
      "metadata": {
        "id": "aHDsx2WjMRUp",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ec50bae8-b5b8-4e7b-d557-5850729014ba"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Churn Prediction Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "       False       0.94      0.99      0.97       572\n",
            "        True       0.95      0.61      0.74        95\n",
            "\n",
            "    accuracy                           0.94       667\n",
            "   macro avg       0.94      0.80      0.85       667\n",
            "weighted avg       0.94      0.94      0.93       667\n",
            "\n"
          ]
        }
      ]
    }
  ]
}